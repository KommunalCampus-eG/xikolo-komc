openapi: 3.0.0
info:
  title: Chatbot API
  version: '1.0'
  description: 'API for the chatbot, allowing access to relevant user information.'
  contact:
    name: openHPI
    url: "https://open.hpi.de"
    email: info@openhpi.de
servers:
  - description: localhost
    url: 'http://localhost:3000/bridges/chatbot'
  - description: openHPI
    url: 'https://open.hpi.de/bridges/chatbot'
  - description: KI-Campus
    url: 'https://learn.ki-campus.org/bridges/chatbot'
  - description: KI-Campus Staging
    url: 'https://learn-staging.ki-campus.org/bridges/chatbot'
paths:
  /authenticate:
    post:
      summary: Retrieve an authentication token for a user
      description: 'Create an authentication token for a user, identified by a SAML uid (NameID).'
      responses:
        '200':
          description: OK (token created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              examples:
                Token:
                  value:
                    token: v2.public.ODFlMDEwMDAtMzEwMC00NDQ0LWEwMDEtMDAwMDAwMDAwMDAxKdmvsS1bbRRuSdre5F4S_JzVKdbNLLYGgqipyn_Zfp-GWkP9JmszIw59efG1xqMRtaV5wOuXpjOT7ZDURGAbCA
          headers: {}
        '401':
          description: Not authorized (either due to missing authentication information or invalid bearer token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    title: You must provide an Authorization header to access this resource.
                    status: 401
                Invalid shared secret:
                  value:
                    title: 'The bearer token you provided was invalid, has expired or has been revoked.'
                    status: 401
        '404':
          description: Not Found (there is no user matching the provided uid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not found:
                  value:
                    title: A valid authorization ID must be provided in the request body to generate a token for a user.
                    status: 404
      operationId: post-authenticate
      security:
        - Shared secret: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
              description: The body must contain the SAML NameID of a user in the uid parameter
            examples:
              uuid as SAML NameID:
                value: uid=00112233-4455-6677-8899-aabbccddeeff
        description: The body contains the SAML NameID as uid parameter
      tags:
        - authentication
  /user:
    get:
      summary: Retrieve user id
      description: Retrieve the internal id of a user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                User:
                  value:
                    id: 00112233-4455-6677-8899-aabbccddeeff
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401-user-token'
      security:
        - User token: []
      operationId: get-user
      tags:
        - users
  /courses:
    get:
      summary: Retrieve list of courses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
              examples:
                Courses:
                  value:
                    - id: 00112233-4455-6677-8899-aabbccddeeff
                      title: Cloud und Virtualisierung
                      course_code: cloud-und-virtualisierung
                      start_date: '2022-02-22T22:00:00Z'
                      language: de
                      self_paced: true
                      certificates:
                        roa:
                          enabled: true
                          requirement: 50
                        cop:
                          enabled: true
                          requirement: 50
        '401':
          description: Not authorized (either due to missing authorization header or invalid signature inside the token).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    title: You must provide an Authorization header to access this resource.
                    status: 401
                Invalid signature:
                  value:
                    title: Invalid Signature
                    status: 401
      operationId: get-courses
      description: Retrieve a list of all courses available on the learning platform (in a chatbot-specific course representation).
      security:
        - User token: []
      tags:
        - courses
  /my_courses:
    get:
      summary: Retrieve list of enrolled courses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
              examples:
                Courses:
                  value:
                    - id: 00112233-4455-6677-8899-aabbccddeeff
                      title: Cloud und Virtualisierung
                      start_date: '2022-02-22T22:00:00Z'
                      language: de
                      self_paced: true
                      certificates:
                        roa:
                          enabled: true
                          requirement: 50
                        cop:
                          enabled: true
                          requirement: 50
        '401':
          $ref: '#/components/responses/401-user-token'
      operationId: get-my-courses
      description: Retrieve a list of the courses the user identified in the authorization token is enrolled to (in a chatbot-specific course representation).
      security:
        - User token: []
      tags:
        - courses
  '/my_courses/{id}':
    post:
      summary: Enroll user in course
      operationId: post-my-courses-id
      responses:
        '200':
          description: OK (the enrollment was created)
        '401':
          $ref: '#/components/responses/401-user-token'
        '403':
          description: Forbidden (user is not allowed to enroll into the course).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Invite only:
                  value:
                    title: This course is invite-only.
                    status: 403
        '404':
          $ref: '#/components/responses/404-no-course'
        '422':
          description: 'Unprocessable Entity (the enrollment could not be created due to any other internal error, e.g. the course is access restricted)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unprocessable entity:
                  value:
                    title: Unprocessable Entity
                    status: 422
      description: Enroll the user identified in the authentication token into a course.
      security:
        - User token: []
      tags:
        - courses
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: The course id
    delete:
      summary: Unenroll user from course
      operationId: delete-my-courses-id
      responses:
        '204':
          description: No Content (the enrollment has been deleted successfully)
        '401':
          $ref: '#/components/responses/401-user-token'
        '404':
          description: Not Found (either a course with the given id could not be found or the user was not enrolled to the course)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not found:
                  value:
                    title: Not Found
                    status: 404
                Not enrolled:
                  value:
                    title: The user is not enrolled for this course.
                    status: 404
      description: Unenroll the user identified in the authentication token from a course.
      security:
        - User token: []
      tags:
        - courses
  '/my_courses/{id}/achievements':
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: The course id
    get:
      summary: Retrieve achievements in a course
      tags:
        - courses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificates:
                    $ref: '#/components/schemas/Certificates'
                  points:
                    $ref: '#/components/schemas/Points'
                  visits:
                    $ref: '#/components/schemas/Visits'
                required:
                  - certificates
                  - points
                  - visits
              examples:
                Record of Achievement:
                  value:
                    certificates:
                      type: record_of_achievement
                      name: Record of Achievement
                      achieved: true
                      achievable: false
                      description: Congratulations! You achieved a certificate for this course by scoring 95% in the graded assignments.
                      requirements:
                        - type: completion
                          achieved: true
                          description: Achieve 50% of the overall score in graded assignments.
                      download:
                        available: true
                        description: null
                        url: 'http://localhost:3000/certificate/render?course_id=00112233-4455-6677-8899-aabbccddeeff&type=RecordOfAchievement'
                      points:
                        achieved: 114.8
                        total: 120
                        percentage: 95
                    points:
                      achieved: 114.8
                      total: 120
                      percentage: 95
                    visits:
                      achieved: 30
                      total: 30
                      percentage: 100
        '401':
          $ref: '#/components/responses/401-user-token'
        '404':
          $ref: '#/components/responses/404-no-course'
      operationId: get-my-courses-id-achievments
      security:
        - User token: []
      description: 'Retrieve achievement information for a user identified by the authentication token in a course, including achieved certificates, points, and item visits.'
  '/my_quizzes':
    parameters:
      - schema:
          type: string
          format: uuid
          example: 00000001-3300-4444-9999-000000000002
        in: query
        name: course_id
        required: true
        description: The ID of the specific course to get information for.
    get:
      summary: Retrieve quizzes for a specific course
      tags: quizzes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/quizzes"
              examples:
                Quizzes:
                  value:
                    - quiz_id: 81e01000-3300-4444-a003-000000000003
                      course_id: 81e01000-3300-4444-a001-000000000002
                      questions:
                        question_id: 81e01000-3800-4444-a002-000000000003
                        question: What is the answer?
                        question_points: 2.0
                        question_explanation: null
                        question_type: Xikolo::Quiz::MultipleAnswerQuestion
                        answers:
                          answer_id: 791ec59e-f55d-4d76-bc28-15c5f59abeeb
                          answer_text: null
                          answer_explanation: null
                          answer_correct: false
        '401':
          $ref: '#/components/responses/401-user-token'
        '404':
          description: Not Found (there are no quizzes for the given course id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not found:
                  value:
                    title: Not found
                    status: 404
components:
  schemas:
    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
      x-examples:
        Authentication Token:
          token: v2.public.ODFlMDEwMDAtMzEwMC00NDQ0LWEwMDEtMDAwMDAwMDAwMDAxKdmvsS1bbRRuSdre5F4S_JzVKdbNLLYGgqipyn_Zfp-GWkP9JmszIw59efG1xqMRtaV5wOuXpjOT7ZDURGAbCA
      description: The authentication token for a user comes in a JSON response with the token key and indicates its version and scope in the string value.
    User:
      title: User
      type: object
      description: A user representation containing only the user id (in uuid format).
      x-examples:
        User id:
          id: 00112233-4455-6677-8899-aabbccddeeff
      properties:
        id:
          type: string
          format: uuid
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
    Course:
      description: A representation of a course with the relevant attributes for chatbot conversations.
      type: object
      x-examples:
        Course:
          id: 00000001-3300-4444-9999-000000000001
          title: Cloud und Virtualisierung
          course_code: cloud-und-virtualisierung
          start_date: '2021-05-21T00:00:00Z'
          language: de
          self_paced: true
          certificates:
            roa:
              enabled: true
              requirement: 50
            cop:
              enabled: true
              requirement: 50
      properties:
        id:
          type: string
          format: uuid
          example: 00112233-4455-6677-8899-aabbccddeeff
        title:
          type: string
        start_date:
          type: string
          format: date-time
          example: '2022-02-22T22:00:00Z'
        language:
          type: string
          example: de
        self_paced:
          type: boolean
        certificates:
          type: object
          required:
            - roa
            - cop
          properties:
            roa:
              type: object
              required:
                - enabled
                - requirement
              properties:
                enabled:
                  type: boolean
                requirement:
                  type: number
            cop:
              type: object
              required:
                - enabled
                - requirement
              properties:
                enabled:
                  type: boolean
                requirement:
                  type: number
      required:
        - id
        - title
        - start_date
        - language
        - self_paced
        - certificates
    Error:
      title: Error
      type: object
      properties:
        title:
          type: string
        status:
          type: number
      x-examples:
        Unauthorized:
          title: You must provide an Authorization header to access this resource.
          status: 401
        Invalid shared secret:
          title: 'The bearer token you provided was invalid, has expired or has been revoked.'
          status: 401
        Not found:
          title: There is no user for the provided authorization ID.
          status: 404
        Invalid signature:
          title: Invalid Signature
          status: 401
    Certificates:
      description: A representation of the certificates a user achieved in a course
      type: object
      x-examples:
        Record of Achievement:
          type: record_of_achievement
          name: Record of Achievement
          achieved: true
          achievable: false
          description: Congratulations! You achieved a certificate for this course by scoring 95% in the graded assignments.
          requirements:
            - type: completion
              achieved: true
              description: Achieve 50% of the overall score in graded assignments.
          download:
            available: true
            description: null
            url: 'http://localhost:3000/certificate/render?course_id=00112233-4455-6677-8899-aabbccddeeff&type=RecordOfAchievement'
          points:
            achieved: 114.8
            total: 120
            percentage: 95
        Confirmation of Participation:
          type: confirmation_of_participation
          name: Confirmation of Participation
          achieved: false
          achievable: true
          description: You completed 33.3% of all available learning units in this course. You need to complete at least 16.7% more learning units to achieve your confirmation.
          requirements:
            - type: progress
              achieved: true
              description: Complete at least 50% of the learning units.
          download:
            available: false
            description: 'Once the certificate is released, you can download it here.'
            url: null
          visits:
            achieved: 5
            total: 15
            percentage: 33.3
      title: ''
      properties:
        type:
          type: string
          enum:
            - record_of_achievement
            - confirmation_of_participation
            - certificate
        name:
          type: string
        achieved:
          type: boolean
        achievable:
          type: boolean
        description:
          type: string
        requirements:
          type: array
          uniqueItems: true
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - progress
                  - completion
              achieved:
                type: boolean
              description:
                type: string
            required:
              - type
              - achieved
              - description
        download:
          type: object
          required:
            - available
            - url
          properties:
            available:
              type: boolean
            description:
              type: string
            url:
              type: string
              format: uri
        points:
          $ref: '#/components/schemas/Points'
        visits:
          $ref: '#/components/schemas/Visits'
      required:
        - type
        - name
        - achieved
        - achievable
        - description
        - requirements
        - download
    Points:
      description: A representation of points achieved in a course
      type: object
      properties:
        achieved:
          type: number
        total:
          type: number
        percentage:
          type: number
      required:
        - achieved
        - total
        - percentage
      x-examples:
        Points:
          achieved: 114.8
          total: 120
          percentage: 95
    Visits:
      description: A representation of visits to items in a course
      type: object
      x-examples:
        Visits:
          achieved: 5
          total: 15
          percentage: 33.3
      properties:
        achieved:
          type: integer
        total:
          type: integer
        percentage:
          type: number
      required:
        - achieved
        - total
        - percentage
    Quizzes:
      description: A representation of quizzes of a course
      type: object
      x-examples:
        Quizzes:
          quiz_id: 81e01000-3300-4444-a003-000000000003
          course_id: 81e01000-3300-4444-a001-000000000002
          questions:
            question_id: 81e01000-3800-4444-a002-000000000003
            question: What is the answer?
            question_points: 2.0
            question_explanation: null
            question_type: Xikolo::Quiz::MultipleAnswerQuestion
            answers:
              answer_id: 791ec59e-f55d-4d76-bc28-15c5f59abeeb
              answer_text: null
              answer_explanation: null
              answer_correct: false
      properties:
        quiz_id:
          type: string
          format: uuid
        course_id:
          type: string
          format: uuid
        questions:
          type: object
          properties:
            question_id:
              type: string
              format: uuid
            question:
              type: string
            question_points:
              type: number
            question_explanation:
              type: string
            question_type:
              type: string
            answers:
              type: object
              properties:
                answer_id:
                  type: string
                  format: uuid
                answer_text:
                  type: string
                answer_explanation:
                  type: string
                answer_correct:
                  type: boolean
  securitySchemes:
    Shared secret:
      type: http
      scheme: bearer
      description: The authorization header for the token endpoint needs a bearer token for the realm "chatbot-bridge-api". The token is a shared secret to be agreed on with the openHPI team.
    User token:
      type: http
      scheme: bearer
      description: 'The authorization headers for the actual resource endpoints (user, ...) need a user-specific token as a bearer token. This can be requested using the authenticate endpoint.'
  responses:
    401-user-token:
      description: Not authorized (either due to missing authorization header or invalid signature inside the token).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Unauthorized:
              value:
                title: You must provide an Authorization header to access this resource.
                status: 401
            Invalid signature:
              value:
                title: Invalid Signature
                status: 401
    404-no-course:
      description: Not Found (there is no course for the given id)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            Not found:
              value:
                title: Not Found
                status: 404
tags:
  - name: authentication
  - name: courses
  - name: users
