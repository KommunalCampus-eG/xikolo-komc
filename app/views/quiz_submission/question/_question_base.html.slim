.quiz-question.multiple-answer id=question.id
  .question
    .row.question-info
      .col-xs-6
        strong
          = t(:'items.quiz.question')
          =< index + 1
      .col-xs-6
        - if show_solution && user_submission
          .primary-color.text-align-right
            = t(:'quiz_submission.quiz_question_points_slashed', points: user_submission.points.round(2), max_points: question.points)
        - elsif !item.survey?
          .text-align-right
            = t(:'quiz_submission.question_points', points: question.points.round(2))

    .RenderedMarkdown lang=item.lang
      == render_markdown question.text, allow_tables: true

  .question-content
    = render Global::DisclosureWidget.new(t(:'items.quiz.show_question_explanation'),
      expanded_summary: t(:'items.quiz.hide_question_explanation'),
      content_lang: item.lang,
      visible: show_solution && question.explanation.present?)

      .RenderedMarkdown
        == render_markdown(question.explanation, allow_tables: true)

    - if question.is_a? Xikolo::Quiz::FreeTextQuestion
      .mt15
      - if show_solution && user_submission
        - user_answer = user_submission
      - elsif !snapshot.nil?
        - user_answer = snapshot.loaded_data[question.id]
        - if user_answer && !user_answer.first[1].empty?
          javascript:
            ready(function () {
              $("##{question.id}_indicator", '#quiz-state-indicators').addClass('edited');
            });

      = render 'quiz_submission/question/free_text',
        show_solution: show_solution, question: question,
        answer: question.answers.first, user_submission: user_answer,
        lang: item.lang
    - elsif question.is_a? Xikolo::Quiz::EssayQuestion
      .mt15
      - if show_solution && user_submission
        - user_answer = user_submission.quiz_submission_answers.first.user_answer_text
      - elsif !snapshot.nil?
        - user_answer = snapshot.loaded_data[question.id]
      - else
        - user_answer = ''
      - if user_answer.present?
        javascript:
          ready(function () {
            $("##{question.id}_indicator", '#quiz-state-indicators').addClass('edited');
          });

      = render 'quiz_submission/question/essay',
        show_solution: show_solution, question: question,
        answer: question.answers.first, user_submission: user_answer
    - elsif question.is_a?(Xikolo::Quiz::MultipleChoiceQuestion) && item.survey? && !show_solution && question.answers.size >= Xikolo.config.multiple_choice_answers_as_dropdown_threshold
      = render Quiz::Dropdown.new(question, submission: defined?(user_submission) ? user_submission : nil, snapshot: snapshot)
    - elsif question.is_a? Xikolo::Quiz::MultipleAnswerQuestion
      = render Quiz::CheckBoxes.new(question, submission: defined?(user_submission) ? user_submission : nil, snapshot: snapshot, show_solution: show_solution, lang: item.lang)
    - else
      - question.answers.each do |answer|
        - answer_selected_by_user = false
        - if show_solution
          .mt15
          - answer_selected_by_user = user_submission.quiz_submission_answers.map(&:quiz_answer_id).include?(answer.id) if user_submission
        - elsif !snapshot.nil?
          .mt15
          - answer_selected_by_user = snapshot.loaded_data[question.id].include?(answer.id) unless snapshot.loaded_data.nil? || snapshot.loaded_data[question.id].nil?
          - if answer_selected_by_user
            javascript:
              ready(function() {
                $( "##{question.id}_indicator", '#quiz-state-indicators').addClass('edited');
              });

        = render 'quiz_submission/question/multiple_choice',
          show_solution: show_solution, question: question,
          answer: answer, answer_selected_by_user: answer_selected_by_user,
          lang: item.lang
