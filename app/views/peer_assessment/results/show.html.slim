- unless @teacherview
  = javascript_include_tag 'lanalytics-pa-results'

/ Info box for the result page
- unless @teacherview
  .text

    .panel-group.mt20
      .panel-pa-info.panel
        .panel-heading
          .panel-title
            => t :'peer_assessment.shared.explanation.learn_more'
            a.collapsed data-toggle="collapse" href="#results-info-body"
              = t :'peer_assessment.results.phase'
              span.caret

        .panel-collapse.collapse.pa-gray#results-info-body
          .panel-body.pa-grays
            = render Global::Callout.new(t(:'peer_assessment.results.info_text.intro')) do
              - I18n.t(:'peer_assessment.results.info_text.general').each do |v|
                p == v

/ Result display
.mt40
h1#monitored-user = "#{@monitored_user}'s Results" if @teacherview
- if @previous_step.deadline.past?
  - if @received_reviews.empty?
    .p10.pa-gray
      .mr10.em1-2 = t :'peer_assessment.results.where_is_grade'
      div = t :'peer_assessment.results.waiting_for_peers'

  - else
    .row
      .col-md-4.col-md-offset-4.text-align-center
        h2 = t :'peer_assessment.results.your_grade'
        .result-circle
          - result_in_percent = [@grade.overall_grade.fdiv(@assessment.max_points), 1.0].min * 100
          = render Course::CircularProgress.new(result_in_percent, "#{@grade.overall_grade}/#{@assessment.max_points}")

      .invisible-to-md
        .mt60
      .col-md-4
        .p10
          h4 = t :'peer_assessment.results.grade_composition.headline'
          table.table.table-compact
            tbody
              tr
                td = t :'peer_assessment.results.grade_composition.base'
                td == "&nbsp;&nbsp;&nbsp;#{@grade.base_points}"
                td
                  span.xi-icon.em1-2.vbase.fa-regular.fa-comment-question aria-label=t(:'peer_assessment.results.grade_composition.helpers.base') data-tooltip=t(:'peer_assessment.results.grade_composition.helpers.base')
              - @grade.bonus_points.each do |bonus|
                - if bonus.last.to_f != 0.0
                  tr
                    td = t :"peer_assessment.results.grade_composition.#{bonus.first}"
                    - if bonus.last.to_f.positive?
                      - sign = '+'
                    - elsif bonus.last.to_f.zero?
                      - sign = '&nbsp;'
                    - else
                      - sign = ''
                    td == "#{sign}&nbsp;#{bonus.last.to_f}"
                    td
                      span.xi-icon.em1-2.vbase.fa-regular.fa-comment-question aria-label=t(:"peer_assessment.results.grade_composition.helpers.#{bonus.first}") data-tooltip=t(:"peer_assessment.results.grade_composition.helpers.#{bonus.first}")
              - if @grade.delta != 0.0 && !@grade.absolute
                tr
                  td = t :'peer_assessment.results.grade_composition.delta'
                  - if @grade.delta.to_f.positive?
                    - delta_sign = '+'
                  - elsif @grade.delta.to_f.zero?
                    - delta_sign = '&nbsp;'
                  - else
                    - delta_sign = ''
                  td == "#{delta_sign}&nbsp;#{@grade.delta.to_f}"
                  td
                    span.xi-icon.em1-2.vbase.fa-regular.fa-comment-question aria-label=t(:'peer_assessment.results.grade_composition.helpers.delta') data-tooltip=t(:'peer_assessment.results.grade_composition.helpers.delta')

          - if @grade.absolute
            .alert.alert-info
              = t :'peer_assessment.results.grade_composition.absolute_delta', grade: @grade.delta

          - if @grade.overall_grade > @assessment.max_points
            = render Global::Callout.new(t(:'peer_assessment.results.grade_exceeded'), icon: Global::FaIcon.new('star'))

    - unless @grading_conflict.nil?
      - if @grading_conflict['open']
        = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.notifier', times: pluralize(@nominations, 'time'), referral: short_uuid(@grading_conflict.id)), type: :error)
      - else
        = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.notifier_closed', times: pluralize(@nominations, 'time'), referral: short_uuid(@grading_conflict.id)))

    - if @nominations&.positive?
      = render Global::Callout.new(t(:'peer_assessment.results.nomination', times: @nominations), icon: Global::FaIcon.new('star'))

- else
  .pa-gray.p10
    .mr10.em1-2 = t :'peer_assessment.results.where_is_grade'
    div = t :'peer_assessment.results.waiting_for_deadline', distance: distance_of_time_in_words(DateTime.now, @previous_step.deadline)

/ Received and written reviews tables
.mt30
h4 = t :'peer_assessment.results.reviews_received'
hr.divider.slim
- if @received_reviews.empty?
  = render Global::Callout.new(t(:'peer_assessment.results.no_reviews'))
- else
  table.table.table-striped
    thead
      tr
        th
        th = t :'peer_assessment.results.received_grade'
        th = t :'peer_assessment.results.your_feedback'
        th
        th
    tbody
      - @received_reviews.each_with_index do |presenter, index|
        tr
          td = "##{index + 1}"
          td
            - if presenter.feedback_grade.present? && !presenter.accused?
              = presenter.given_grade @assessment

            - elsif presenter.accused?
              ' —

            - elsif @current_step.deadline.past?
              em = t :'peer_assessment.results.rating_passed'

            - elsif @assessment.is_team_assessment
              em = t :'peer_assessment.results.rate_first_team'

            - else
              em = t :'peer_assessment.results.rate_first'
          td
            - if !presenter.feedback_grade.nil?
              / First, render full stars
              - presenter.feedback_grade.times do
                = render Global::FaIcon.new('star', style: :solid)
              / Now render empty ones to pad
              - (3 - presenter.feedback_grade).times do
                = render Global::FaIcon.new('star')

            - elsif presenter.accused?
              ' —
          td
            - if presenter.conflict_filed?
              span.label.label-danger data-tooltip=presenter.received_review_conflict_filed_title aria-label=presenter.received_review_conflict_filed_title = t :'peer_assessment.results.received_reviews.reported_by_peer'
            - elsif presenter.accused?
              span.label.label-danger data-tooltip=presenter.received_review_accused_title aria-label=presenter.received_review_accused_title = t :'peer_assessment.results.received_reviews.reported_peer'
          td
            - if @teacherview
              .review_teacherview
                = link_to t(:'peer_assessment.results.buttons.view'), review_result_peer_assessment_step_results_path({review_id: short_uuid(presenter.id)}.merge(@teacher_view_params)), class: 'btn btn-default btn-xs'
            - else
              = link_to t(:'peer_assessment.results.buttons.view'), review_result_peer_assessment_step_results_path({review_id: short_uuid(presenter.id)}), class: 'btn btn-default btn-xs'

/ Regrading button
- if @regrading_possible && !@teacherview
  button.btn.btn-default.btn-sm#request-regrading-button.mb10 type='button' data={'show-on-click': '#request-regrading-form', 'hide-on-click': '#request-regrading-button'}
    = t(:'peer_assessment.results.grading_conflict.submit_button')

- if current_user.instrumented?
  - if @regrading_possible_for_user
    = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.user_instrumented_hint_possible'), type: :error)
  - else
    = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.user_instrumented_hint_not_possible'), type: :error)
- elsif @teacherview
  - if @regrading_possible_for_user
    = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.teacherview_hint_possible'), type: :error)
  - else
    = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.teacherview_hint_not_possible'), type: :error)

- if @regrading_possible
  = simple_form_for(@new_grading_conflict,
      url: request_regrading_peer_assessment_step_results_path,
      html: {class: 'form-horizontal mb20 js-submit-confirm',
        hidden: true,
        id: 'request-regrading-form',
        data: {confirm_title: t(:'peer_assessment.results.grading_conflict.confirmation_title'),
          confirm_message: t(:'peer_assessment.results.grading_conflict.confirmation_text'),
        },
      }) do |f|

    = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.info_text'))

    = f.input :comment, as: :text, required: true, input_html: {rows: 2}, label: t(:'peer_assessment.results.grading_conflict.label'), placeholder: t(:'peer_assessment.results.grading_conflict.placeholder')

    .row
      .col-md-2.col-lg-2
      .col-lg-10.col-md-10
        button.btn.btn-sm.btn-primary type="submit"
          = t(:'peer_assessment.results.grading_conflict.submit_button')
        button#request-regrading-cancel.btn.btn-sm.btn-default.ml10 type="button" data={'show-on-click': '#request-regrading-button', 'hide-on-click': '#request-regrading-form'}
          = t(:'global.cancel')

- else
  = render Global::Callout.new(t(:'peer_assessment.results.grading_conflict.submit_button_hint'))

.mt30
h4 = t :'peer_assessment.results.reviews_written'
hr.divider.slim
table.table.table-striped
  thead
    tr
      th
      th = t :'peer_assessment.results.grade'
      th = t :'peer_assessment.results.received_feedback'
      th
      th
  tbody
    - @written_reviews.each_with_index do |presenter, index|
      tr
        td = "##{index + 1}"
        td = presenter.given_grade @assessment
        td
          - if !presenter.feedback_grade.nil? && !presenter.accused?
            / Render full stars and empty stars for padding (same as table above)
            - presenter.feedback_grade.times do
              = render Global::FaIcon.new('star', style: :solid)
            - (3 - presenter.feedback_grade).times do
              = render Global::FaIcon.new('star')

          - elsif presenter.accused? || presenter.conflict_filed?
            ' —

          - elsif @current_step.deadline.past?
            em = t :'peer_assessment.results.rating_received_passed'

          - else
            em = t :'peer_assessment.results.waiting_rating'

        td
          - if presenter.accused?
            span.label.label-danger data-tooltip=presenter.written_review_accused_title aria-label=presenter.written_review_accused_title = t :'peer_assessment.results.written_reviews.reported_by_peer'
          - if presenter.conflict_filed?
            span.label.label-danger data-tooltip=presenter.written_review_conflict_filed_title aria-label=presenter.written_review_conflict_filed_title = t :'peer_assessment.results.written_reviews.reported_peer'

        td
          - if @teacherview
            .review_teacherview
              = link_to t(:'peer_assessment.results.buttons.view'), review_result_peer_assessment_step_results_path({review_id: short_uuid(presenter.id)}.merge(@teacher_view_params)), class: 'btn btn-default btn-xs'
          - else
            = link_to t(:'peer_assessment.results.buttons.view'), review_result_peer_assessment_step_results_path({review_id: short_uuid(presenter.id)}), class: 'btn btn-default btn-xs'

.mt40

#review-teacherview-modal.modal.fade.bs-example-modal-lg tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"
  .modal-dialog.modal-lg role="document"
    .modal-content
      .modal-header
        button.close data-dismiss="modal" aria-hidden="true"
          '&times;
        h4.modal-title
      .modal-body

javascript:
    ready(function() {
        $('.review_teacherview').click(function () {
            $('#review-teacherview-modal .modal-body').html('...');
            $('#review-teacherview-modal').modal('show');
            var url = $(this).find('a[href]').attr('href');
            $('#review-teacherview-modal .modal-body').load(url);

            $('#review-teacherview-modal .modal-dialog').css({
                width: 'auto',
            });
            return false;
        });
    });
