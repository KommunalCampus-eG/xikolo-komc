.col-md-12
  .row
    / Back button
    .col-md-12
      a.col-md-3.col-xs-12.col-sm-6.btn.btn-sm.btn-gray-darker href="#{course_peer_assessments_path @promises[:course].course_code}" = t :'peer_assessment.train_samples.back'

  .row
    .col-md-12.mt20
      / Title and info text
      h3 = t :'peer_assessment.train_samples.train_sample_overview'
      hr.divider.slim

      - if @training_step.training_opened
        .alert.alert-info = t :'peer_assessment.train_samples.training_opened'
      - else
        .mb20
          = t(:'peer_assessment.train_samples.eligible_submissions', count: @train_stats.available_submissions)

        .row
          / Progress bar with indicators
          .col-sm-5
            = render Global::Meter.new(value: @train_stats.train_sample_percentage, label: "#{@train_stats.train_sample_percentage}%", type: :info)

          / buttons
          .col-sm-5
            a.btn.btn-sm.btn-default.h30.mr10.js-show-loader href="#{new_peer_assessment_train_sample_url}"
              span.vmiddle = t :'peer_assessment.review.grade_samples'

            - if @train_stats.training_available?
              form.inline-block#open_training_form method="post" action="#{open_training_peer_assessment_train_samples_url short_uuid(@assessment.id)}" data-confirm-message="#{t :'peer_assessment.train_samples.open_training_message'}"
                = hidden_field_tag :authenticity_token, form_authenticity_token
                button.btn.btn-default.btn-sm.h30 href="#" = t :'peer_assessment.train_samples.open_training'

            - else
              button.btn.btn-default.btn-sm.disabled.h30 = t :'peer_assessment.train_samples.open_missing'

        .mb30
          = render Global::Callout.new(t(:'peer_assessment.train_samples.notice', count: @train_stats.required_reviews))

        / Blue info bar if there are enough train samples available
        - if @train_stats.training_available?
          .row
            .col-md-12
              .alert.alert-info = t :'peer_assessment.train_samples.opening_possible'

      / List of existing samples
      - if @review_presenters.empty?
        .alert.alert-info = t :'peer_assessment.review.no_samples'
      - else
        table.table.table-striped
          thead
            tr
              th
              th = t :'peer_assessment.train_samples.status'
              th = t :'peer_assessment.train_samples.deadline'
              th = t :'peer_assessment.review.assigned_grade'
              th
                - unless @training_step.training_opened
                  = t :'peer_assessment.review.actions'
          tbody
            - @review_presenters.each_with_index do |presenter, index|
              tr
                td = "##{index + 1}"
                td
                  span.label class="label-#{presenter.status_class}"
                    = presenter.status
                td = l presenter.deadline.to_datetime, format: :short
                td = "#{presenter.grade} / #{@assessment.max_points}"
                td
                  - unless @training_step.training_opened
                    a.btn.btn-xs.btn-default href="#{edit_peer_assessment_train_sample_url params[:peer_assessment_id], presenter}"
                      = presenter.submitted ? t(:'peer_assessment.review.view') : t(:'peer_assessment.review.continue')
                    = simple_form_for(presenter.review_form, as: :xikolo_peer_assessment_review, url: peer_assessment_train_sample_path(params[:peer_assessment_id], presenter), method: :delete, html: {class: 'delete_review ml5 inline-block'})
                      - if presenter.submitted
                        button.btn.btn-danger.btn-xs type="submit" = t :'peer_assessment.train_samples.delete'
                      - else
                        button.btn.btn-danger.btn-xs type="submit" = t :'peer_assessment.train_samples.skip'

= javascript_include_tag 'peer_assessment/train_samples'
