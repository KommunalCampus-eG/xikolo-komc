- unless @teacherview
  = link_to t(:'peer_assessment.review.back_to_overview'), peer_assessment_step_results_path, class: 'btn btn-sm btn-default col-xs-12 col-md-2'
  .clearfix
  .mt40

/ Submission
= render 'peer_assessment/shared/rendered_submission', submission: @submission
- if @review.filed_conflict!.present?
  = render Global::Callout.new(t(:'peer_assessment.results.you_reported_submission',
                   reason: t(:"peer_assessment.conflict.reasons.#{@review.filed_conflict!['reason']}").downcase,
                   referral: short_uuid(@review.filed_conflict!.id)), type: :error)

  - unless @review.filed_conflict!['open']
    = render Global::Callout.new(t(:'peer_assessment.results.conflict_closed'))

- else
  - unless @review.accusal!.nil?
    = render Global::Callout.new(t(:'peer_assessment.results.peer_reported',
                   reason: t(:"peer_assessment.conflict.reasons.#{@review.accusal!['reason']}").downcase,
                   referral: short_uuid(@review.accusal!.id)), type: :error)

    - unless @review.accusal!['open']
      = render Global::Callout.new(t(:'peer_assessment.results.conflict_closed'))

  - unless @review.conflict_filed?
    / Main part
    h4 = t :'peer_assessment.results.rating.headline'
    hr.divider.slim
    .pa-rt-generic.mb20.p10 == render_markdown @review.text

    / Peer rating and grading stuff
    - unless @review.feedback_grade.nil?
      = render 'rendered_rating'

    .mt30
    h4 = t :'peer_assessment.results.grading_rubrics'
    hr.divider.slim

    / Grading rubrics
    - @rubric_presenters.each_with_index do |presenter, index|
      = render 'rendered_rubric', presenter: presenter, index: index

    / Back button
    - unless @teacherview
      .mt40
      = link_to t(:'peer_assessment.review.back_to_overview'), peer_assessment_step_results_path, class: 'btn btn-sm btn-default col-xs-12 col-md-4 col-md-offset-4'
      .clearfix

  .mt40
