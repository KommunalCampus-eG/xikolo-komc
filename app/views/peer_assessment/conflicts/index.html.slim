= render 'peer_assessment/shared/assessment_title'

.col-md-12.mb40
  a.col-md-3.col-xs-12.col-sm-6.btn.btn-sm.btn-gray-darker href="#{course_peer_assessments_path @promises[:course].course_code}" = t :'peer_assessment.conflict.back_to_overview'
  .col-md-9
    form.inline-block.mr15#direct-search-form method="get" action="#{peer_assessment_conflicts_path(short_uuid(@assessment.id))}/" target="_blank"
      input.input-sm#id-input name="id" value="" required="required" placeholder="Referral ID"
      button.btn.btn-primary.btn-sm.noborder type="submit" = t :'peer_assessment.conflict.search_by_referral'

    form.inline-block method="get" action="#{peer_assessment_conflicts_path(short_uuid(@assessment.id))}"
      input.input-sm name="user_filter" value="#{params[:user_filter]}" required="required" placeholder="#{t :'peer_assessment.submission_management.user_filter.placeholder'}"
      button.btn.btn-primary.btn-sm.noborder type="submit" = t :'peer_assessment.submission_management.user_filter.submit'

  .clearfix
  .mb30

  / Filters
  form.form-inline.white-bg.p10.mb30.mt30#filters action="#{peer_assessment_conflicts_path}" method="get"
    label.mr5 for="state" = "#{t(:'peer_assessment.conflict.state')}:"
    = select_tag 'state', options_for_select([[t(:'peer_assessment.conflict.open'), true], [t(:'peer_assessment.conflict.closed'), false]], params[:state]), prompt: t(:'peer_assessment.conflict.filters.any')

    label.ml20.mr5 for="reason" = "#{t(:'peer_assessment.conflict.reason')}:"
    = select_tag 'reason', options_for_select(t(:'peer_assessment.conflict.all_reasons').map { |k, v| [v, k] }, params[:reason]), prompt: t(:'peer_assessment.conflict.filters.any')

    label.ml20.mr5 for="subject" = "#{t(:'peer_assessment.conflict.conflict_subject')}:"
    = select_tag 'subject', options_for_select(t(:'peer_assessment.conflict.subjects').first(2).map { |k, v| [v, k] }, params[:subject]), prompt: t(:'peer_assessment.conflict.filters.any')

    button.btn.btn-primary.btn-sm.ml20 type="submit" = t :'peer_assessment.conflict.filters.submit'

  - if @conflicts.empty?
    = render Global::Callout.new(t(:'peer_assessment.conflict.no_conflicts'))

  - else
    table.table.table-striped
      thead
        tr
          th
          th = t :'peer_assessment.conflict.referral_id'
          th = t :'peer_assessment.conflict.reporter'
          th = t :'peer_assessment.conflict.accused_student'
          th = t :'peer_assessment.conflict.filed_at'
          th = t :'peer_assessment.conflict.reason'
          th = t :'peer_assessment.conflict.state'
          th = t :'peer_assessment.conflict.conflict_subject'
          th
      tbody
        - @conflicts.each_with_index do |conflict, index|
          tr
            td = "##{(index + (((params[:page].try(:to_i) || 1) - 1) * (params[:per_page].try(:to_i) || 30))) + 1}"
            td = short_uuid(conflict['id'])
            td = conflict['reporter_object']['email'] unless conflict['reporter_object'].nil?
            - if !conflict['accused_team_member_objects'].nil? && !conflict['accused_team_member_objects'].empty?
              td
                table
                  - conflict['accused_team_member_objects'].each do |accused_member|
                    tr
                      td = accused_member['email']
            - else
              td = conflict['accused_object'].email unless conflict['accused_object'].nil?
            td = conflict['created_at'].to_formatted_s(:short)
            td = t :"peer_assessment.conflict.all_reasons.#{conflict['reason']}"
            td
              - if conflict['open']
                span.label.label-warning = t :'peer_assessment.conflict.open'
              - else
                span.label.label-success = t :'peer_assessment.conflict.closed'

            td = t :"peer_assessment.conflict.subjects.#{conflict['conflict_subject_type'].blank? ? 'blank' : conflict['conflict_subject_type'].downcase}"
            td
              = link_to t(:'peer_assessment.conflict.reconcile'), peer_assessment_conflict_path(id: short_uuid(conflict['id'])), class: 'btn btn-xs btn-default'

    = will_paginate RestifyPaginationCollection.new(@conflicts), :renderer => PaginationRenderer
