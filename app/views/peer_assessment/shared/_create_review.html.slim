- team_evaluation_reviews = [] if local_assigns[:team_evaluation_reviews].nil?

.mt40
  h4
    = t :'peer_assessment.review.grading'
    span.ml10.fp9.hidden#last_saved
      = "#{t :'peer_assessment.last_saved'}:"
      span.fp9.ml5.last_saved
      span.ml5.xi-icon.fa-regular.fa-comment-question aria-label=t(:'peer_assessment.review.autosave_explanation') data-tooltip=t(:'peer_assessment.review.autosave_explanation') data-html="true"
  hr.divider.slim

/ Form spanning all partials
= simple_form_for(@review.review_form,
        as: :xikolo_peer_assessment_review,
        url: @form_presenter.submit_url,
        wrapper: :compact,
        html: {method: 'put',
                multipart: true,
                id: 'review_form',
                class: 'js-submit-confirm',
                style: 'display: inline-block',
                data: {autosave_button: '#review_autosave',
                        submit_button: '#review_submit',
                        confirm_title: @form_presenter.confirm_title,
                        confirm_message: @form_presenter.confirm_message,
                        last_saved_container: '#last_saved',
                        remote_error_message: t(:'peer_assessment.autosave.error'),
                        autosave_url: @form_presenter.autosave_url,
                        unload_message: t(:'peer_assessment.review.unload_message')}}) do |f|

  / Additional hidden information
  input type="hidden" name="rubrics" value=@rubric_presenters.map(&:id).join(' ')

  / Rubrics (summative feedback)
  = render 'peer_assessment/shared/summative_feedback', form: f, presenter: @form_presenter, rubrics: @rubric_presenters

  / Textbox (qualitative feedback)
  = render 'peer_assessment/shared/qualitative_feedback', form: f, presenter: @form_presenter

  / Error messages
  - if defined? @errors
    ul.pl50.alert.alert-danger.mt40#review_errors
      - @errors[:messages].each do |message|
        li = message

    / Display error borders
    /= javascript_include_tag 'peer_assessment/review'
    - @errors[:error_ids].each do |id|
      javascript:
        review_error("#{id}");

  - if @form_presenter.show_bottom_info
    = render Global::Callout.new(t(:'peer_assessment.review.submit_revise_info'))

  - unless team_evaluation_reviews.empty?
    .mt40
      h3 = t(:'peer_assessment.review.team_evaluation')
      hr.divider.slim
      = render Global::Callout.new(t(:'peer_assessment.administration.team_evaluation_rubrics.explanation'))
      - team_evaluation_reviews.each_with_index do |team_evaluation_review, index|
        = render 'peer_assessment/self_assessments/team_evaluation_form', team_evaluation_review: team_evaluation_review, index: index, form: f

  .mt40
    - if @form_presenter.enable_autosave
      = button_tag(type: 'button', class: 'btn btn-default mr10', id: 'review_autosave', data: {save_text: t(:'peer_assessment.saving')}) do
        = t :'peer_assessment.review.autosave_button'
    = button_tag(type: 'submit', class: 'btn btn-primary mr10', id: 'review_submit', data: {submission_state: @review.submitted}) do
      = @form_presenter.submit_button_text

- if @form_presenter.is_optional
  = create_advance_form(@passed, @skip_form)
  button.btn.btn-default.mr10 type='submit' = t :'peer_assessment.self_assessment.skip_button'

- if @form_presenter.enable_autosave
  javascript:
    ready(function() {
      return $('#review_form').autosave();
    });
