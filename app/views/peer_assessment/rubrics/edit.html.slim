= link_to t(:'peer_assessment.administration.rubrics.back_to_overview'), peer_assessment_rubrics_path, class: 'btn btn-sm btn-default col-md-2 col-sm-4 col-sx-12'
.clearfix
= render Global::Callout.new(t(:'peer_assessment.administration.rubrics.deadline_warning'), type: :warning)

= simple_form_for(@rubric.rubric,
    url: peer_assessment_rubric_path(@assessment.id, @rubric.id),
    wrapper: :larger_labels,
    html: {id: 'rubric_form', method: 'patch', class: 'mt40 col-md-12 form-horizontal'}) do |r|
  = r.input :title, required: true, label: t(:'peer_assessment.administration.rubrics.title'), placeholder: t(:'peer_assessment.administration.rubrics.title_placeholder')
  = r.input :hints, as: :markdown, required: true,
      label: t(:'peer_assessment.administration.rubrics.hints'),
      uploads: {purpose: :peerassessment_rubric_hints},
      value: @rubric.rubric['hints']
      / we need the uncasted hints value: Acfs calls `to_s` on the Hash
        and returns a wrong value. @rubric['hints'] returns the value as it
        was retrieved from the service.
        This value option can probably be removed once @rubric is no long an Acfs
        resource.
  hr.divider.slim
  .row.mt40
    .col-md-12.mb40
      = render Global::Callout.new(t(:'peer_assessment.administration.rubrics.sort_info'))
    .col-lg-3.col-md-3
      .bold.inline-block = "* #{t(:'peer_assessment.administration.rubrics.options')}:"
    .col-lg-9.col-md-9
      table
        tbody#options
          - @rubric.options.each_with_index do |option, index|
            tr
              td.nowrap.vtop
                input type="hidden" name="options[#{index}][id]" value="#{option.id}"
                input.w40.mr10.text-align-center required="required" type="number" name="options[#{index}][points]" value="#{option.points}"
                span.mr15 = t :'items.quiz.points'
              td.w80p
                textarea.input-sm style="width: 80%" name="options[#{index}][description]" placeholder="#{t :'peer_assessment.administration.rubrics.option_description_placeholder'}"
                  = option.description
              td.nowrap
                button.btn.btn-sm.btn-danger.js-remove type="button" data-url="#{remove_option_peer_assessment_rubric_path(@assessment.id, @rubric.id, params: { option_id: option.id })}" = t :'peer_assessment.administration.rubrics.delete_option'

  .row.mt20
    .col-md-9.col-lg-9.col-md-offset-3.col-lg-offset-3
      button.btn.btn-sm.btn-success#add_option type="button" = t :'peer_assessment.administration.rubrics.add_option'

  .row.mt20
    .col-md-9.col-lg-9.col-md-offset-3.col-lg-offset-3
      button.btn.btn-primary type="submit" = t :'peer_assessment.administration.rubrics.update'

javascript:
  ready(function () {
    $('#add_option').click(function() {
      add_rubric_option();
    });

    $('.js-remove').each(function (index, element) {
      $(element).click(function() {
        xuiSwal.fire({
          title: I18n.t('peer_assessment.administration.rubrics.delete_option_title'),
          text: I18n.t('peer_assessment.administration.rubrics.delete_option_message'),
          icon: 'warning',
          confirmButtonText: I18n.t('global.confirm'),
          cancelButtonText: I18n.t('global.cancel')
        }).then(function (result) {
          if (result.value) {
            $(element).attr('disabled', 'disabled');

            $.post($(element).data('url'), '', function (data) {
              if (data.success) {
                $($(element).parents()[1]).remove();
              }

              $(element).removeAttr('disabled');
            })
          }
        });

        return false;
      });
    });
  });

  function add_rubric_option() {
    var index = highest_index() + 1;
    if (isNaN(index)) { index = 0 }

    $('#options').append( '<tr>' +
                            '<td class="nowrap vtop">' +
                              '<input required="required" type="number" name="options[' + index + '][points]" class="w40 mr10 text-align-center"/>' +
                              '<span class="mr15">#{ t :'items.quiz.points' }</span>' +
                            '</td><td class="w80p">' +
                              '<textarea style="width: 80%" name="options[' + index + '][description]" placeholder="#{t :'peer_assessment.administration.rubrics.option_description_placeholder'}" class="input-sm" />' +
                            '</td>' +
                            '<td class="nowrap"><button type="button" class="btn btn-sm btn-danger" onclick="remove_new_rubric_option(this)">#{t :'peer_assessment.administration.rubrics.delete_option'}</button></td>' +
                          '</tr>'
    );
  }

  function highest_index() {
    try {
      return parseInt($('#options tr').last().find('input').last().attr('name').replace('options[', '').replace('][points]', ''))
    }
    catch (TypeError) {
      return 0;
    }
  }

  function remove_new_rubric_option(e) {
    // Only for newly added options (simply remove the DOM element)
    $($(e).parents()[1]).remove()
  }
