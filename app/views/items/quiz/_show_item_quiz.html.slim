.col-md-12
  .course-area-main data-lanalytics-context={course_id: item.course_id}.to_json
    = render 'items/header', item:

    - if item.enable_proctoring_quiz_iframes? && item.attempts_left?
      - if current_user.instrumented?
        = render Global::Callout.new(t(:'quiz_submission.proctoring.instrumented_info'), type: :warning)
      - else
        iframe src=item.proctoring_cam_check_iframe allow="microphone; camera" width="100%" height="350" frameborder="0" allowfullscreen=true scrolling="no"

    h3
      = t(:'quiz_submission.instruction')
      ':
    hr.divider.slim.alternative

    .RenderedMarkdown lang=item.lang
      == render_markdown item.instructions

    - unless item.survey?
      = render 'items/quiz/quiz_properties', presenter: item, highlight_quiz_properties: true

    - if item.submission_deadline_passed? && current_user.instrumented?
      = render Global::Callout.new(t(:'quiz_submission.masq_warning'), type: :error)

    - if item.show_proctoring_intro?
      hr.divider.slim.alternative
      = render 'items/quiz/proctoring_intro', item:

    div data-lanalytics-resource={type: 'quiz', uuid: item.id}.to_json
      - if item.smowl_registration_required?
        = render Global::Callout.new(t('proctoring.calibration_missing_text'), title: t('proctoring.calibration_missing_callout'), type: :warning) do
          = link_to t('proctoring.calibration_missing_action'), proctoring_registration_details_path(course_id: item.course_code), class: 'btn btn-default'
      - elsif item.smowl_registration_pending?
        = render Global::Callout.new(t('proctoring.calibration_pending_text'), title: t('proctoring.calibration_pending_title'))
      - elsif item.proctored_quiz_unavailable?
        = render Global::Callout.new(t('proctoring.service_unavailable'), type: :error)
      - elsif item.quiz_taken?
        - if item.allow_retake_or_view_results?
          = render 'items/shared/action',
            position:,
            split_action: true,
            action: {action1: new_course_item_quiz_submission_path(item.course_code, item_id: item),
              text1: t(:'quiz_submission.retake_quiz'),
              icon1: 'redo',
              action2: course_item_quiz_submission_path(item.course_code, short_uuid(item.id), short_uuid(item.submission.id), highest_score: item.highest_score?),
              text2: t(:'quiz_submission.quiz_results'),
              icon2: 'money-check-pen'}
        - elsif item.attempts_left? && !item.submission_deadline.nil?
          = render 'items/shared/action',
            action: {action: new_course_item_quiz_submission_path(item.course_code, item_id: item),
              text: t(:'quiz_submission.retake_quiz'),
              icon: 'redo',
              confirm_start_graded_quiz: item.confirm_quiz_start?}
      - elsif !item.quiz_taken?
        = render 'items/shared/action',
          action: {action: new_course_item_quiz_submission_path(item_id: item),
            text: t('items.quiz.start_quiz_now'),
            icon: 'play',
            confirm_start_graded_quiz: item.confirm_quiz_start?}

      = render Course::BottomNavigation.new(course_id: position.course.id,
        prev_item_id: position.prev_item&.id,
        next_item_id: position.next_item&.id)
